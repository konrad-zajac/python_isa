"""Module for day 2"""


def string_operations():
    a = 'Ala ma kota'
    b = 123
    c = 'osiem'
    # jeżeli dlugosc a większa od  10 wypisz 'lubię koty'
    # w przeciwnym wypadku jeżeli b + 12 równa się 134 wypisz 'piję wodę po ogórkach'
    # w przeciwnym wypadku jeżeli c != 'siedem' wypisz 'najlepiej smakują kasztany z placu grunwaldzkiego'
    if len(a) > 10:
        print('lubię koty')
    elif ( b + 12 ) == 134:
        print('pije wode po ogorkach')
    elif c != 'siedem':
        print('najlepiej smakują kasztany z placu grunwaldzkiego')
    b = '123'
    d='ßasa\tßing'
    print(' print()')
    print('method_1')
    print('pierwsy testowany to  string : ' + a +'drugi testowany to string: '+b+ 'trzeci testowany to string : '+c+ 'czwarty testowany to string : '+d )
    print(' ')
    print('method_2')
    print('The capitalize() function returns a string with first letter capitalized.')
    print(a.capitalize())
    print(b.capitalize())
    print(c.capitalize())
    print(d.capitalize())
    print(' ')
    print('method_3')
    print('The center() method returns a string which is padded with the specified character.')
    print('the argument is 13')
    print(a.center(13))
    print(b.center(13))
    print(c.center(13))
    print(d.center(13))
    print(' ')
    print('method_4')
    print('The casefold() method is removes all case distinctions present in a string.')
    print('notice ß to ss')
    print(a.casefold())
    print(b.casefold())
    print(c.casefold())
    print(d.casefold())
    print(' ')
    print('method_5')
    print('The count() method searches the substring in the given string and returns how many times the substring is present in it.')
    print('testong lower \'a\'')
    print(a.count('a'))
    print(b.count('a'))
    print(c.count('a'))
    print(d.count('a'))
    print(' ')
    print('method_6')
    print('The endswith() method returns True if a string ends with the specified suffix. .')
    print('testong lower \'a\'')
    print(a.endswith('a'))
    print(b.endswith('a'))
    print(c.endswith('a'))
    print(d.endswith('a'))
    print(' ')
    print('method_7')
    print('The expandtabs() takes an integer tabsize argument. The default tabsize is 8.')
    print(a.expandtabs())
    print(b.expandtabs())
    print(c.expandtabs())
    print(d.expandtabs())
    print(' ')
    print('method_8')
    print(' The find() method returns the lowest index of the substring (if found). If not found, it returns -1.')
    print('testing lower \'a\'')
    print(a.find('a'))
    print(b.find('a'))
    print(c.find('a'))
    print(d.find('a'))
    print(' ')
    print('method_9')
    print('The string format() method formats the given string into a nicer output in Python. ')
    print('{} ma {}.sztuk {}'.format('Ala', 'kota',1))
    print(' ')
    print('method_10')
    print('metoda .lower()')
    print(a.lower())
    print(b.lower())
    print(c.lower())
    print(d.lower())
    print(' ')
    print('method_11')
    print('The index() method returns the index of a substring inside the string (if found). If the substring is not found, it raises an exception.')
    print('arg = string \'ma\'')
    print(a.index('ma'))
    print(' ')
    print('method_12')
    print('The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.')
    print(a.isalnum())
    print(b.isalnum())
    print(c.isalnum())
    print(d.isalnum())
    print(' ')
    print('method_13')
    print('The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False.')
    print(a.isalpha())
    print(b.isalpha())
    print(c.isalpha())
    print(d.isalpha())
    print(' ')
    print('method_14')
    print('The isdecimal() method returns True if all characters in a string are decimal characters. If not, it returns False.')
    print(a.isdecimal())
    print(b.isdecimal())
    print(c.isdecimal())
    print(d.isdecimal())
    print(' ')
    print('method_15')
    print('The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.')
    print(a.isnumeric())
    print(b.isnumeric())
    print(c.isnumeric())
    print(d.isnumeric())
    print(' ')
    print('method_16')
    print('The isdigit() method returns True if all characters in a string are digits. If not, it returns False.')
    print('The diffrence can lie in coding')
    print(a.isdigit())
    print(b.isdigit())
    print(c.isdigit())
    print(d.isdigit())
    print(' ')
    print('method_17')
    print('The isidentifier() method returns True if the string is a valid identifier in Python. If not, it returns False.')
    print(a.isidentifier())
    print(b.isidentifier())
    print(c.isidentifier())
    print(d.isidentifier())
    print(' ')
    print('method_18')
    print('The islower() method returns True if all alphabets in a string are lowercase alphabets. If the string contains at least one uppercase alphabet, it returns False.')
    print(a.islower())
    print(b.islower())
    print(c.islower())
    print(d.islower())
    print(' ')
    print('method_19')
    print('The isprintable() methods returns True if all characters in the string are printable or the string is empty. If not, it returns False.')
    print(a.isprintable())
    print(b.isprintable())
    print(c.isprintable())
    print(d.isprintable())
    print(' ')
    print('method_20')
    print('The isspace() method returns True if there are only whitespace characters in the string. If not, it return False.')
    print(a.isspace())
    print(b.isspace())
    print(c.isspace())
    print(d.isspace())
    print(' ')
    print('method_21')
    print('The istitle() returns True if the string is a titlecased string. If not, it returns False.')
    print(a.istitle())
    print(b.istitle())
    print(c.istitle())
    print(d.istitle())
    print(' ')
    print('method_22')
    print('The string upper() method converts all lowercase characters in a string into uppercase characters and returns it.')
    print(a.upper())
    print(b.upper())
    print(c.upper())
    print(d.upper())
    print(' ')
    print('method_23')
    print('The string swapcase() method converts all uppercase characters to lowercase and all lowercase characters to uppercase characters of the given string, and returns it.')
    print(a.swapcase())
    print(b.swapcase())
    print(c.swapcase())
    print(d.swapcase())
    print(' ')
    print('method_24')
    print('The lstrip() method returns a copy of the string with leading characters removed (based on the string argument passed).')
    print('arg = upper \'A\'')
    print(a.lstrip('A'))
    print(b.lstrip('A'))
    print(c.lstrip('A'))
    print(d.lstrip('A'))
    print(' ')
    print('method_25')
    print('The rstrip() method returns a copy of the string with trailing characters removed (based on the string argument passed).')
    print('testing lower \'a\'')
    print(a.rstrip('a'))
    print(b.rstrip('a'))
    print(c.rstrip('a'))
    print(d.rstrip('a'))
    print(' ')
    print('method_26')
    print('The strip() method returns a copy of the string with both leading and trailing characters removed (based on the string argument passed).')
    print('testing lower \'a\'')
    print(a.strip('a'))
    print(b.strip('a'))
    print(c.strip('a'))
    print(d.strip('a'))
    print(' ')
    print('method_27')
    print('The partition() method splits the string at the first occurrence of the argument string and returns a tuple containing the part the before separator, argument string and the part after the separator.')
    print('testing lower \'a\'')
    print(a.partition('a'))
    print(b.partition('a'))
    print(c.partition('a'))
    print(d.partition('a'))
    print(' ')
    print('method_28')
    print('The rpartition() method takes a string parameter separator that separates the string at the last occurrence of it.')
    print('testing lower \'a\'')
    print(a.rpartition('a'))
    print(b.rpartition('a'))
    print(c.rpartition('a'))
    print(d.rpartition('a'))
    print(' ')
    print('method_29')
    print('The replace() method returns a copy of the string where all occurrences of a substring is replaced with another substring.')
    print('replacing lower \'a\' with lower \'b\'')
    print(a.replace('a','b'))
    print(b.replace('a','b'))
    print(c.replace('a','b'))
    print(d.replace('a','b'))
    print(' ')
    print('method_30')
    print('The rfind() method returns the highest index of the substring (if found). If not found, it returns -1.')
    print('testing lower \'a\'')
    print(a.rfind('a'))
    print(b.rfind('a'))
    print(c.rfind('a'))
    print(d.rfind('a'))
    print(' ')
    print('method_31')
    print('The split() method breaks up a string at the specified separator and returns a list of strings.')
    print(a.split())
    print(b.split())
    print(c.split())
    print(d.split())
    print(' ')
    print('method_32')
    print('The rsplit() method splits string from the right at the specified separator and returns a list of strings.')
    print(a.rsplit())
    print(b.rsplit())
    print(c.rsplit())
    print(d.rsplit())
    print(' ')
    print('method_33')
    print('The splitlines() method splits the string at line breaks and returns a list of lines in the string.')
    print(a.splitlines())
    print(b.splitlines())
    print(c.splitlines())
    print(d.splitlines())
    print(' ')
    print('method_34')
    print('The startswith() method returns True if a string starts with the specified prefix(string). If not, it returns False.')
    print('testing upper \'A\'')
    print(a.startswith('A'))
    print(b.startswith('A'))
    print(c.startswith('A'))
    print(d.startswith('A'))
    print(' ')
    print('method_35')
    print('The title() method returns a title cased version of the string. Meaning, the first character of the each word is capitalized (if the first character is a letter).')
    print(a.title())
    print(b.title())
    print(c.title())
    print(d.title())
    print(' ')
    print('method_36')
    print('The zfill() returns a copy of the string with \'0\' filled to the left. The length of the returned string depends on the width provided.')
    print('parameter = 6')
    print(a.zfill(6))
    print(b.zfill(6))
    print(c.zfill(6))
    print(d.zfill(6))
    print(' ')
    print('method_37')
    print('The any method returns: True if at least one element of an iterable is true False if all elements are false or if an iterable is empty')
    print(any(a))
    print(any(b))
    print(any(c))
    print(any(d))
    print('0 , False')
    print(any([0, False]))
    print('0 , False,3')
    print(any([0, False,3]))
    print(' ')
    print('method_38')
    print('The all() method returns:True - If all elements in an iterable are trueFalse - If any element in an iterable is false')
    print(all(a))
    print(all(b))
    print(all(c))
    print(all(d))
    print(' ')
    print('method_39')
    print('The ascii() method returns a string containing a printable representation of an object. It escapes the non-ASCII characters in the string using \\x, \\u or \\U escapes.')
    print(ascii(a))
    print(ascii(b))
    print(ascii(c))
    print(ascii(d))
    print(' ')
    print('method_40')
    print('The bool() method converts a value to Boolean (True or False) using the standard truth testing procedure.')
    print(bool(a))
    print(bool(b))
    print(bool(c))
    print(bool(d))
    print(' ')
    print('method_41')
    print('The complex() method returns a complex number when real and imaginary parts are provided, or it converts a string to a complex number.')
    z = complex(2, -3)
    print(' ')
    print(z)
    print('method_42')
    print('The enumerate() method adds counter to an iterable and returns it (the enumerate object).')
    print(list(enumerate(a)))
    print(list(enumerate(b)))
    print(list(enumerate(c)))
    print(list(enumerate(d)))
    print(' ')
    print('method_43')
    print('The float() method returns a floating point number from a number or a string.')
    print(float(10))
    print(float(b))
    print(' ')
    #input() takes input in Python
    print('method_44')
    print('The int() method returns an integer object from any number or string.')
    print('arg = 123.45')
    print(int(123.45))
    print(' ')
    print('method_45')
    print('The iter() method returns iterator object for the given object that loops through each element in the object.')
    vowelsIter = iter(a)
    print(next(vowelsIter))
    print(next(vowelsIter))
    print(next(vowelsIter))
    print(' ')
    print('method_46')
    print('The len() function returns the number of items (length) of an object.')
    print(len(a))
    print(len(b))
    print(len(c))
    print(len(d))
    print(' ')
    print('method_47')
    print('The max() method returns the largest element in an iterable or largest of two or more parameters.')
    print(max(b))
    print(' ')
    print('method_48')
    print('The min() method returns the smallest element in an iterable or smallest of two or more parameters.')
    print(min(b))
    print(' ')
    print('method_49')
    print('The map() function applies a given function to each item of an iterable (list, tuple etc.) and returns a list of the results.')


    def calculateSquare(n):
        return n*n

    numbers = (1, 2, 3, 4)
    result = map(calculateSquare, numbers)
    print(result)


    # converting map object to set
    numbersSquare = set(result)
    print(numbersSquare)
    print(' ')
    print('method_50')
    print('The ord() method returns an integer representing the Unicode code point of the given Unicode character.')
    print(ord('a'))
    print(ord('b'))
    print(ord('c'))
    print(ord('d'))
    print(' ')
    print('method_51')
    print('The reversed() method returns the reversed iterator of the given sequence.')
    print(list(reversed(a)))
    print(list(reversed(b)))
    print(list(reversed(c)))
    print(list(reversed(d)))
    print(' ')
    print('method_52')
    print('The sorted() method returns a sorted list from the given iterable.')
    print(sorted(a))
    print(sorted(b))
    print(sorted(c))
    print(sorted(d))
    print(' ')
    print('method_53')
    print('The sum() function adds the items of an iterable and returns the sum.')
    numbers = [2.5, 3, 4, -5]
    numbersSum = sum(numbers)
    print(numbersSum)
    print(' ')
